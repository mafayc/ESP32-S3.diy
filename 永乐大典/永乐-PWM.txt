//PWM-B
#include <stdio.h>
#include "driver/ledc.h"
#include "esp_err.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

void YF(int a,int b);
#define VCC GPIO_NUM_35
#define LEDC_OUTPUT_IO          (36) // Define the output GPIO
#define GND GPIO_NUM_37
#define LEDC_TIMER              LEDC_TIMER_0
#define LEDC_MODE               LEDC_LOW_SPEED_MODE
#define LEDC_CHANNEL            LEDC_CHANNEL_0
#define LEDC_DUTY_RES           LEDC_TIMER_8_BIT // Set duty resolution to 13 bits
#define LEDC_DUTY               (128) // Set duty to 50%. ((2 ** 8) - 1) * 50% = 4095

void app_main(void)
{

	esp_rom_gpio_pad_select_gpio(VCC);
	esp_rom_gpio_pad_select_gpio(GND);

	gpio_set_direction(VCC, GPIO_MODE_OUTPUT);
	gpio_set_direction(GND, GPIO_MODE_OUTPUT);
    //gpio_pullup_en(PIN);    gpio_pullup_dis(PIN);    gpio_pulldown_en(PIN);    gpio_pulldown_dis(PIN);

    /* Blink off (output low) */
    printf("OK GND\n");
    gpio_set_level(GND, 0);

    /* Blink on (output high) */
    printf("OK VCC\n");
    gpio_set_level(VCC, 1);


    while(1)
    {

    	YF(3,1);YF(2,1);YF(1,1);
    	YF(2,1);



    }
}
void YF(int a,int b)
{
    // Prepare and then apply the LEDC PWM timer configuration
    ledc_timer_config_t ledc_timer = {
        .speed_mode       = LEDC_MODE,
        .timer_num        = LEDC_TIMER,
        .duty_resolution  = LEDC_DUTY_RES,
        //.freq_hz          = LEDC_FREQUENCY,  // Set output frequency at 5 kHz
		.freq_hz          = a*1000,
		.clk_cfg          = LEDC_AUTO_CLK
    };
    ESP_ERROR_CHECK(ledc_timer_config(&ledc_timer));

    // Prepare and then apply the LEDC PWM channel configuration
    ledc_channel_config_t ledc_channel = {
        .speed_mode     = LEDC_MODE,
        .channel        = LEDC_CHANNEL,
        .timer_sel      = LEDC_TIMER,
        .intr_type      = LEDC_INTR_DISABLE,
        .gpio_num       = LEDC_OUTPUT_IO,
        .duty           = 0, // Set duty to 0%
        .hpoint         = 0
    };
    ESP_ERROR_CHECK(ledc_channel_config(&ledc_channel));

    ESP_ERROR_CHECK(ledc_set_duty(LEDC_MODE, LEDC_CHANNEL, LEDC_DUTY));
    // Update duty to apply the new value
    ESP_ERROR_CHECK(ledc_update_duty(LEDC_MODE, LEDC_CHANNEL));

    vTaskDelay(b*100);
}
